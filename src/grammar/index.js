/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,32],$V2=[1,33],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,13],$V7=[1,22],$V8=[1,38],$V9=[1,39],$Va=[1,40],$Vb=[1,23],$Vc=[1,27],$Vd=[1,41],$Ve=[1,42],$Vf=[1,43],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,47],$Vk=[5,7,8,9,10,11,12,17,29,34,85,89,91,92,101,105,107,109,113,114,115,117,118,119],$Vl=[2,24],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[21,33,79],$Vs=[1,71],$Vt=[1,72],$Vu=[1,69],$Vv=[1,70],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,66],$VA=[1,65],$VB=[1,67],$VC=[1,95],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,93],$VH=[1,94],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[14,34,45,79],$VM=[1,103],$VN=[1,106],$VO=[21,33],$VP=[1,108],$VQ=[1,131],$VR=[1,132],$VS=[1,121],$VT=[1,122],$VU=[1,123],$VV=[1,124],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,133],$V11=[1,134],$V21=[13,14,17,21,33,46,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81],$V31=[1,163],$V41=[1,172],$V51=[1,177],$V61=[17,33,79],$V71=[13,14,17,21,33,46,65,66,67,68,69,70,71,72,73,74,79,80,81],$V81=[17,21,33,46,65,70,72,73,74,79,80,81],$V91=[33,79],$Va1=[17,21,33,46,70,72,73,79,80,81],$Vb1=[5,7,8,9,10,11,12,17,29,34,85,89,91,92,101,102,105,107,109,113,114,115,117,118,119],$Vc1=[1,256],$Vd1=[1,268],$Ve1=[17,107,109];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"intType":7,"dblType":8,"boolType":9,"charType":10,"strType":11,"dynamicListRw":12,"minor":13,"major":14,"BLOCKCONTENT":15,"openBracket":16,"closeBracket":17,"INSTRUCTION":18,"MAIN":19,"DECLARATION":20,"semicolom":21,"ASSIGNMENT":22,"METHODS":23,"FUNCTION":24,"CONTROLSEQ":25,"LOOPSEQ":26,"SWITCHSEQ":27,"LOOPESCAPE":28,"startRw":29,"withRw":30,"FUNCTIONCALL":31,"ASSIGNMENTS":32,"comma":33,"id":34,"equals":35,"EXPRESSIONS":36,"TERNARY":37,"INCREMENTALASSIGNMENT":38,"NEWVECTORASSIGNMENT":39,"VECTORASSIGNMENT":40,"DYNAMICLIST":41,"plusPlus":42,"minusMinus":43,"VECTORVALUE":44,"openSquareBracket":45,"closeSquareBracket":46,"newRw":47,"integer":48,"EXPLIST":49,"VARVALUE":50,"decimal":51,"text":52,"character":53,"trBool":54,"flBool":55,"TOLOWER":56,"TOUPPER":57,"LENGTHSEQ":58,"TYPEOFSEQ":59,"TOSTRINGSEQ":60,"TOCHARARRAY":61,"TRUNCATE":62,"ROUND":63,"GETVALUE":64,"plus":65,"equalsEquals":66,"moreOrEquals":67,"lessOrEquals":68,"nonEquals":69,"division":70,"module":71,"power":72,"times":73,"minus":74,"and":75,"or":76,"not":77,"openParenthesis":78,"closeParenthesis":79,"questionMark":80,"colom":81,"PARAMSLIST":82,"PARAMVAR":83,"FUNCTIONPARAMS":84,"voidType":85,"APPEND":86,"SETVALUE":87,"WRITELINE":88,"appendRw":89,"getValueRw":90,"setValueRw":91,"writeLineRw":92,"toLowerRw":93,"toUpperRw":94,"lengthRw":95,"truncateRw":96,"roundRw":97,"typeOfRw":98,"toStringRw":99,"toCharArrayRw":100,"ifRw":101,"elseRw":102,"CONTROLSEQELIFS":103,"CONTROLSEQELIF":104,"switchRw":105,"SWITCHSEQCASES":106,"defaultRw":107,"SWITCHSEQCONTENT":108,"caseRw":109,"WHILESEQ":110,"DOWHILESEQ":111,"FORSEQ":112,"whileRw":113,"doRw":114,"forRw":115,"FORSEQPARAMS":116,"breakRw":117,"continueRw":118,"returnRw":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"intType",8:"dblType",9:"boolType",10:"charType",11:"strType",12:"dynamicListRw",13:"minor",14:"major",16:"openBracket",17:"closeBracket",21:"semicolom",29:"startRw",30:"withRw",33:"comma",34:"id",35:"equals",42:"plusPlus",43:"minusMinus",45:"openSquareBracket",46:"closeSquareBracket",47:"newRw",48:"integer",51:"decimal",52:"text",53:"character",54:"trBool",55:"flBool",65:"plus",66:"equalsEquals",67:"moreOrEquals",68:"lessOrEquals",69:"nonEquals",70:"division",71:"module",72:"power",73:"times",74:"minus",75:"and",76:"or",77:"not",78:"openParenthesis",79:"closeParenthesis",80:"questionMark",81:"colom",85:"voidType",89:"appendRw",90:"getValueRw",91:"setValueRw",92:"writeLineRw",93:"toLowerRw",94:"toUpperRw",95:"lengthRw",96:"truncateRw",97:"roundRw",98:"typeOfRw",99:"toStringRw",100:"toCharArrayRw",101:"ifRw",102:"elseRw",105:"switchRw",107:"defaultRw",109:"caseRw",113:"whileRw",114:"doRw",115:"forRw",117:"breakRw",118:"continueRw",119:"returnRw"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[15,3],[4,2],[4,2],[4,1],[18,2],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,1],[19,4],[20,2],[32,3],[32,1],[22,1],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[38,2],[38,2],[40,3],[40,3],[39,9],[39,7],[41,7],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[44,4],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,3],[36,4],[36,1],[36,3],[37,5],[49,3],[49,1],[82,3],[82,1],[83,2],[84,3],[84,2],[24,4],[24,4],[31,4],[31,3],[23,1],[23,1],[23,1],[23,1],[86,6],[64,6],[87,8],[88,4],[56,4],[57,4],[58,4],[62,4],[63,4],[59,4],[60,4],[61,4],[25,5],[25,7],[25,6],[25,8],[103,2],[103,1],[104,6],[27,7],[27,10],[27,9],[106,2],[106,1],[108,4],[26,1],[26,1],[26,1],[110,5],[111,7],[112,5],[116,5],[116,5],[28,2],[28,2],[28,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        return $$[$0-1]; 
    
break;
case 2:
 
        this.$ = DataType.INTEGER; 
    
break;
case 3:
 
        this.$ = DataType.DOUBLE; 
    
break;
case 4:
 
        this.$ = DataType.BOOLEAN; 
    
break;
case 5:
 
        this.$ = DataType.CHARACTER; 
    
break;
case 6:
 
        this.$ = DataType.STRING; 
    
break;
case 7:

        this.$ = `${DataType.DYNAMICLIST}<${$$[$0-1]}>`
    
break;
case 8: case 12: case 13: case 14: case 76: case 83:

        this.$ = $$[$0-1];
    
break;
case 9: case 10: case 109: case 115:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 11: case 23: case 79: case 81: case 110: case 116:

        this.$ = [$$[$0]];
    
break;
case 15: case 16: case 18: case 19: case 27: case 28: case 29: case 30: case 46: case 92:

        this.$ = $$[$0];
    
break;
case 17:

        this.$ = $$[$0];    
    
break;
case 20:

        this.$ = new Main(getToken(_$[$0-3]), $$[$0-1]);
    
break;
case 21:

        this.$ = new Declaration(getToken(_$[$0-1]), { type: $$[$0-1], assignments: $$[$0] });
    
break;
case 22: case 78: case 80:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 24:

        this.$ = new ExpAssignment(getToken(_$[$0]), { id: $$[$0] });
    
break;
case 25:

        this.$ = new ExpAssignment(getToken(_$[$0-2]), { id: $$[$0-2], exp: $$[$0] });  
    
break;
case 26:

        this.$ = new ExpAssignment(getToken(_$[$0-2]), { id: $$[$0-2], exp: $$[$0] });
    
break;
case 31:

        this.$ = new IncrementalAssignment(getToken(_$[$0-1]), { 
            id: $$[$0-1], operator: Operator.PLUSPLUS })
    
break;
case 32:

        this.$ = new IncrementalAssignment(getToken(_$[$0-1]), { 
            id: $$[$0-1], operator: Operator.MINUSMINUS })
    
break;
case 33: case 34:

        this.$ = new VectorPosition(getToken(_$[$0-2]), { 
            value: $$[$0-2], exp: $$[$0] });
    
break;
case 35:

        this.$ = new VectorAssignment(getToken(_$[$0-8]), { type: $$[$0-3], id: $$[$0-8], size: $$[$0-1] });
    
break;
case 36:

        this.$ = new VectorAssignment(getToken(_$[$0-6]), { id: $$[$0-6], defValues: $$[$0-1] });
    
break;
case 37:

        this.$ = new DynamicList(getToken(_$[$0-6]), { id: $$[$0-6], type: $$[$0-1] });
    
break;
case 38:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.DOUBLE })
    
break;
case 39:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.STRING })
    
break;
case 40:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.ID })
    
break;
case 41:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.INTEGER })
    
break;
case 42:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.CHARACTER })
    
break;
case 43: case 44:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.BOOLEAN })
    
break;
case 45: case 55:

        this.$ = new Value(getToken(_$[$0]), { 
            value: '', type: '', fromCall: $$[$0] })
    
break;
case 56:

        this.$ = new VectorValue(getToken(_$[$0-3]), { 
            value: $$[$0-3], index: $$[$0-1], type: DataType.STRING });
    
break;
case 57:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.PLUS });
    
break;
case 58:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.EQUALSEQUALS });
    
break;
case 59:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MOREOREQUALS });
    
break;
case 60:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.LESSOREQUALS });
    
break;
case 61:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.NONEQUALS });
    
break;
case 62:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.DIVISION });
    
break;
case 63:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MODULE });
    
break;
case 64:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.POWER });
    
break;
case 65:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.TIMES });
    
break;
case 66:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MINUS });
    
break;
case 67:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MINOR });
    
break;
case 68:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MAJOR });
    
break;
case 69:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.AND });
    
break;
case 70:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator:Operator.OR });
    
break;
case 71:

        this.$ = new Expression(getToken(_$[$0-1]), { 
            left: $$[$0], operator: Operator.NOT });
    
break;
case 72:

        this.$ = new Expression(getToken(_$[$0-1]), { 
            left: $$[$0], operator: Operator.NEGATION });
    
break;
case 73:

        this.$ = new Expression(getToken(_$[$0-2]), { left: $$[$0-1] });
    
break;
case 74:

        this.$ = new Expression(getToken(_$[$0-3]), { left: $$[$0] } );
    
break;
case 75:

        this.$ = new Expression(getToken(_$[$0]), { value: $$[$0] });
    
break;
case 77:

        this.$ = new Expression(getToken(_$[$0-4]), { 
            left: $$[$0-2], right: $$[$0], condition: $$[$0-4], operator: Operator.TERNARY })
    
break;
case 82:

        this.$ = { type: $$[$0-1], id: $$[$0] };
    
break;
case 84:

        this.$ = [];
    
break;
case 85:

        this.$ = new FunctionBlock(getToken(_$[$0-3]), { 
            id: $$[$0-2], type: $$[$0-3], params: $$[$0-1], content: $$[$0] });
    
break;
case 86:

        this.$ = new FunctionBlock(getToken(_$[$0-3]), { 
            id: $$[$0-2], type: 'void', params: $$[$0-1], content: $$[$0] });
    
break;
case 87:

        this.$ = new FunctionCall(getToken(_$[$0-3]), { params: $$[$0-1], id: $$[$0-3] })
    
break;
case 88:

        this.$ = new FunctionCall(getToken(_$[$0-2]), { params: [], id: $$[$0-2] })
    
break;
case 93:
   
        this.$ = new Append(getToken(_$[$0-5]), { id: $$[$0-3], params: [$$[$0-1]] });
    
break;
case 94:

        this.$ = new GetValue(getToken(_$[$0-5]), { id: $$[$0-3], params: [$$[$0-1]] });
    
break;
case 95:

        this.$ = new SetValue(getToken(_$[$0-7]), { id: $$[$0-5], params: [$$[$0-3], $$[$0-1]] });
    
break;
case 96:

        this.$ = new WriteLine(getToken(_$[$0-3]), { params: [$$[$0-1]] });
    
break;
case 105:

        this.$ = new Condition(getToken(_$[$0-4]), { 
            valid: { exp: $$[$0-2], body: $$[$0] }
        })
    
break;
case 106:

        this.$ = new Condition(getToken(_$[$0-6]), { 
            valid: { exp: $$[$0-4], body: $$[$0-2] },
            inValid: { exp: $$[$0-4], body: $$[$0] }
        })
    
break;
case 107:

        this.$ = new Condition(getToken(_$[$0-5]), { 
            valid: { exp: $$[$0-3], body: $$[$0-1] },
            fallback: $$[$0]
        })
    
break;
case 108:

        this.$ = new Condition(getToken(_$[$0-7]), { 
            inValid: { exp: $$[$0-5], body: $$[$0] },
            valid: { exp: $$[$0-5], body: $$[$0-3] },
            fallback: $$[$0-2]
        })
    
break;
case 111:

        this.$ = { exp: $$[$0-2], body: $$[$0] };
    
break;
case 112:

        this.$ = new Switch(getToken(_$[$0-6]), { value: $$[$0-4], cases: $$[$0-1] })
    
break;
case 113:

        this.$ = new Switch(getToken(_$[$0-9]), { 
            value: $$[$0-7], cases: $$[$0-4], default: { body: $$[$0-1] } })
    
break;
case 114:

        this.$ = new Switch(getToken(_$[$0-8]), { 
            value: $$[$0-6], default: { body: $$[$0-1] } })
    
break;
case 117:

        this.$ = { case: $$[$0-2], body: $$[$0] };
    
break;
case 121:

        this.$ = new CycleControl(getToken(_$[$0-4]), { 
            condition: $$[$0-2], body: $$[$0] 
         })
    
break;
case 122:

        this.$ = new CycleControl(getToken(_$[$0-6]), { 
            condition: $$[$0-2], body: $$[$0-5], isDoLoop: true
         })
    
break;
case 123:

        this.$ = new ForLoop(getToken(_$[$0-4]), { ...$$[$0-2], body: $$[$0] })
    
break;
case 124:

        this.$ = { withDeclarations: true, 
        assignments: [$$[$0-4]], condition: $$[$0-2], modifiers: $$[$0] }
    
break;
case 125:

        this.$ = { assignments: $$[$0-4], condition: $$[$0-2], modifiers: $$[$0] }
    
break;
case 126:

        this.$ = new BreakValue(getToken(_$[$0-1]))
    
break;
case 127:

        this.$ = new ContinueValue(getToken(_$[$0-1]))
    
break;
case 128:

        this.$ = new ReturnValue(getToken(_$[$0-2]), { content: $$[$0-1] });
    
break;
}
},
table: [{3:1,4:2,6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{1:[3]},{5:[1,44],6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:45,19:46,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,29:$Vj,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},o($Vk,[2,11]),{21:[1,48]},{21:[1,49]},{21:[1,50]},o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),{22:53,32:51,34:[1,52],38:14,39:15,40:16,41:17,44:37},{21:$Vl,35:$Vm,42:$Vn,43:$Vo,45:$Vp,78:$Vq},o($Vr,[2,27]),o($Vr,[2,28]),o($Vr,[2,29]),o($Vr,[2,30]),{21:[2,89]},{21:[2,90]},{21:[2,91]},{21:[2,92]},{34:[1,59]},{78:[1,60]},o($Vk,[2,118]),o($Vk,[2,119]),o($Vk,[2,120]),{78:[1,61]},{21:[1,62]},{21:[1,63]},{31:76,34:$Vs,36:64,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($VL,[2,2]),o($VL,[2,3]),o($VL,[2,4]),o($VL,[2,5]),o($VL,[2,6]),{13:[1,96]},{35:[1,97]},{78:[1,98]},{78:[1,99]},{78:[1,100]},{78:[1,101]},{15:102,16:$VM},{78:[1,104]},{1:[2,1]},o($Vk,[2,9]),o($Vk,[2,10]),{30:[1,105]},o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),{21:[2,21],33:$VN},o($VO,$Vl,{84:107,35:$Vm,42:$Vn,43:$Vo,45:$Vp,78:$VP}),o($VO,[2,23]),{31:76,34:$Vs,36:109,37:110,44:77,47:[1,111],48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($Vr,[2,31]),o($Vr,[2,32]),{31:76,34:$Vs,36:113,44:77,46:[1,112],48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:116,44:77,48:$Vt,49:114,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,79:[1,115],90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{78:$VP,84:117},{31:76,34:$Vs,36:118,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:119,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($Vk,[2,126]),o($Vk,[2,127]),{13:$VQ,14:$VR,21:[1,120],65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11},{31:76,34:$Vs,36:135,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:136,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{6:138,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,31:76,34:$Vs,36:137,37:139,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($V21,[2,75]),o($V21,[2,38]),o($V21,[2,39]),o($V21,[2,40],{45:[1,140],78:$Vq}),o($V21,[2,41]),o($V21,[2,42]),o($V21,[2,43]),o($V21,[2,44]),o($V21,[2,45]),o($V21,[2,46]),o($V21,[2,47]),o($V21,[2,48]),o($V21,[2,49]),o($V21,[2,50]),o($V21,[2,51]),o($V21,[2,52]),o($V21,[2,53]),o($V21,[2,54]),o($V21,[2,55]),{78:[1,141]},{78:[1,142]},{78:[1,143]},{78:[1,144]},{78:[1,145]},{78:[1,146]},{78:[1,147]},{78:[1,148]},{78:[1,149]},{6:150,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5},{31:76,34:$Vs,36:151,37:152,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{34:[1,153]},{34:[1,154]},{31:76,34:$Vs,36:155,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:156,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{113:[1,157]},{4:158,6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{6:162,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,20:160,22:53,32:161,34:$V31,38:14,39:15,40:16,41:17,44:37,116:159},{31:164,34:[1,165]},{22:166,34:$V31,38:14,39:15,40:16,41:17,44:37},{15:167,16:$VM},{6:171,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,79:[1,169],82:168,83:170},o($Vr,[2,25],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,80:$V41}),o($Vr,[2,26]),{12:[1,173]},{35:[1,174]},{13:$VQ,14:$VR,46:[1,175],65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11},{33:$V51,79:[1,176]},o($V21,[2,88]),o($V61,[2,79],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11}),{15:178,16:$VM},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,179]},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,180]},o($Vk,[2,128]),{31:76,34:$Vs,36:181,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:182,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:183,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:184,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:185,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:186,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:187,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:188,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:189,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:190,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:191,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:192,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:193,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:194,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($V71,[2,71],{75:$V01,76:$V11}),o($V81,[2,72],{13:$VQ,14:$VR,66:$VT,67:$VU,68:$VV,69:$VW,71:$VY,75:$V01,76:$V11}),{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,195],80:$V41},{79:[1,196]},{79:[1,197]},{31:76,34:$Vs,36:113,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:198,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:199,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,44:77,48:$Vt,50:200,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,44:77,48:$Vt,50:201,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,44:77,48:$Vt,50:202,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,44:77,48:$Vt,50:203,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,44:77,48:$Vt,50:204,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,44:77,48:$Vt,50:205,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{34:[1,206]},{14:[1,207]},o($Vr,[2,33],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,80:$V41}),o($Vr,[2,34]),{33:[1,208]},{33:[1,209]},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,210]},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,211]},{78:[1,212]},{6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,17:[1,213],18:45,19:46,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,29:$Vj,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{79:[1,214]},{21:[1,215]},{21:[1,216],33:$VN},{22:53,32:51,34:$V31,38:14,39:15,40:16,41:17,44:37},o($Vr,$Vl,{35:$Vm,42:$Vn,43:$Vo,45:$Vp}),{21:[1,217]},{78:$Vq},o($VO,[2,22]),o($Vk,[2,85]),{33:[1,219],79:[1,218]},{16:[2,84]},o($V91,[2,81]),{34:[1,220]},{31:76,34:$Vs,36:221,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{13:[1,222]},{16:[1,224],47:[1,223]},o([13,14,17,21,33,35,46,65,66,67,68,69,70,71,72,73,74,75,76,79,80,81],[2,56]),o($V21,[2,87]),{31:76,34:$Vs,36:225,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($Vk,[2,86]),{15:226,16:$VM},{16:[1,227]},o($V81,[2,57],{13:$VQ,14:$VR,66:$VT,67:$VU,68:$VV,69:$VW,71:$VY,75:$V01,76:$V11}),o($V71,[2,58],{75:$V01,76:$V11}),o($V71,[2,59],{75:$V01,76:$V11}),o($V71,[2,60],{75:$V01,76:$V11}),o($V71,[2,61],{75:$V01,76:$V11}),o($Va1,[2,62],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:$VY,74:$V$,75:$V01,76:$V11}),o([17,21,33,46,65,70,71,72,73,74,79,80,81],[2,63],{13:$VQ,14:$VR,66:$VT,67:$VU,68:$VV,69:$VW,75:$V01,76:$V11}),o([17,21,33,46,79,80,81],[2,64],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,73:$V_,74:$V$,75:$V01,76:$V11}),o($Va1,[2,65],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:$VY,74:$V$,75:$V01,76:$V11}),o($V81,[2,66],{13:$VQ,14:$VR,66:$VT,67:$VU,68:$VV,69:$VW,71:$VY,75:$V01,76:$V11}),o($V71,[2,67],{75:$V01,76:$V11}),o($V71,[2,68],{75:$V01,76:$V11}),o([13,14,17,21,33,46,65,66,67,68,69,70,71,72,73,74,75,79,80,81],[2,69],{76:$V11}),o($V21,[2,70]),o($V21,[2,73]),{31:76,34:$Vs,36:228,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($V21,[2,76]),{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,229]},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,230]},{79:[1,231]},{79:[1,232]},{79:[1,233]},{79:[1,234]},{79:[1,235]},{79:[1,236]},{33:[1,237]},o($VL,[2,7]),{31:76,34:$Vs,36:238,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:239,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{21:[2,96]},{15:240,16:$VM},{31:76,34:$Vs,36:241,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($Vb1,[2,8]),{15:242,16:$VM},{31:76,34:$Vs,36:243,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{31:76,34:$Vs,36:244,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($Vk,[2,20]),{16:[2,83]},{6:171,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,83:245},o($V91,[2,82]),{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,81:[1,246]},{6:247,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5},{6:248,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5},{31:76,34:$Vs,36:116,44:77,48:$Vt,49:249,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($V61,[2,78],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11}),o($Vk,[2,105],{103:251,104:252,102:[1,250]}),{106:253,107:[1,254],108:255,109:$Vc1},o($V21,[2,74]),o($V21,[2,97]),o($V21,[2,98]),o($V21,[2,99]),o($V21,[2,102]),o($V21,[2,103]),o($V21,[2,104]),o($V21,[2,100]),o($V21,[2,101]),{31:76,34:$Vs,36:257,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,258]},{13:$VQ,14:$VR,33:[1,259],65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11},o($Vk,[2,121]),{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,260]},o($Vk,[2,123]),{13:$VQ,14:$VR,21:[1,261],65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11},{13:$VQ,14:$VR,21:[1,262],65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11},o($V91,[2,80]),{31:76,34:$Vs,36:263,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{14:[1,264]},{45:[1,265]},{17:[1,266],33:$V51},{15:267,16:$VM,101:$Vd1},o($Vk,[2,107],{104:270,102:[1,269]}),o($Vb1,[2,110]),{17:[1,271],107:[1,272],108:273,109:$Vc1},{81:[1,274]},o($Ve1,[2,116]),{31:76,34:$Vs,36:275,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,276]},{21:[2,93]},{31:76,34:$Vs,36:277,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},{21:[1,278]},{22:279,34:$V31,38:14,39:15,40:16,41:17,44:37},{22:280,34:$V31,38:14,39:15,40:16,41:17,44:37},o($Vr,[2,77],{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11}),o($Vr,[2,37]),{48:[1,281]},o($Vr,[2,36]),o($Vk,[2,106]),{78:[1,282]},{15:283,16:$VM,101:$Vd1},o($Vb1,[2,109]),o($Vk,[2,112]),{81:[1,284]},o($Ve1,[2,115]),{4:285,6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,81:[1,286]},o($V21,[2,94]),{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,287]},o($Vk,[2,122]),{79:[2,124]},{79:[2,125]},{46:[1,288]},{31:76,34:$Vs,36:289,44:77,48:$Vt,50:68,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:78,57:79,58:80,59:81,60:82,61:83,62:84,63:85,64:86,74:$Vz,77:$VA,78:$VB,90:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,98:$VI,99:$VJ,100:$VK},o($Vk,[2,108]),{4:290,6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,17:[1,291],18:45,19:46,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,29:$Vj,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{4:292,6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},{21:[2,95]},o($Vr,[2,35]),{13:$VQ,14:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,76:$V11,79:[1,293]},{6:12,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,17:[1,294],18:45,19:46,20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,29:$Vj,31:20,34:$V6,38:14,39:15,40:16,41:17,44:37,85:$V7,86:18,87:19,88:21,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,110:24,111:25,112:26,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi},o($Vk,[2,114]),o($Ve1,[2,117],{20:4,22:5,23:6,24:7,25:8,26:9,27:10,28:11,6:12,38:14,39:15,40:16,41:17,86:18,87:19,31:20,88:21,110:24,111:25,112:26,44:37,18:45,19:46,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,29:$Vj,34:$V6,85:$V7,89:$V8,91:$V9,92:$Va,101:$Vb,105:$Vc,113:$Vd,114:$Ve,115:$Vf,117:$Vg,118:$Vh,119:$Vi}),{15:295,16:$VM},o($Vk,[2,113]),o($Vb1,[2,111])],
defaultActions: {18:[2,89],19:[2,90],20:[2,91],21:[2,92],44:[2,1],169:[2,84],210:[2,96],218:[2,83],258:[2,93],279:[2,124],280:[2,125],287:[2,95]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { DataType, getToken, Operator } = require('../compiler/utils')
    const errors = require('../compiler/error')
    const { 
        IncrementalAssignment,
        VectorAssignment,
        VectorPosition,
        FunctionBlock, 
        ExpAssignment,
        ContinueValue,
        FunctionCall, 
        CycleControl,
        Declaration, 
        VectorValue,
        DynamicList,
        ReturnValue,
        Expression,
        WriteLine, 
        Condition,
	    BreakValue,
        GetValue,
        SetValue,
        ForLoop,
        Switch,
        Append,
        Value,
        Main } = require('../compiler/instruction')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 10
break;
case 4:return 85
break;
case 5:return 9
break;
case 6:return 11
break;
case 7:return 8
break;
case 8:return 7
break;
case 9:return 54
break;
case 10:return 55
break;
case 11:return 68
break;
case 12:return 67
break;
case 13:return 66
break;
case 14:return 43
break;
case 15:return 69
break;
case 16:return 42
break;
case 17:return 80
break;
case 18:return 81
break;
case 19:return 70
break;
case 20:return 71
break;
case 21:return 73
break;
case 22:return 72
break;
case 23:return 35
break;
case 24:return 13
break;
case 25:return 14
break;
case 26:return 74
break;
case 27:return 65
break;
case 28:return 75
break;
case 29:return 77
break;
case 30:return 76
break;
case 31:return 33
break;
case 32:return 21
break;
case 33:return 16
break;
case 34:return 17
break;
case 35:return 78
break;
case 36:return 79
break;
case 37:return 45
break;
case 38:return 46
break;
case 39:return 100
break;
case 40:return 12
break;
case 41:return 92
break;
case 42:return 91
break;
case 43:return 90
break;
case 44:return 96
break;
case 45:return 99
break;
case 46:return 93
break;
case 47:return 94
break;
case 48:return 89
break;
case 49:return 95
break;
case 50:return 98
break;
case 51:return 97
break;
case 52:return 29
break;
case 53:return 30
break;
case 54:return 47;
break;
case 55:return 102
break;
case 56:return 101
break;
case 57:return 107
break;
case 58:return 105
break;
case 59:return 117
break;
case 60:return 109
break;
case 61:return 113
break;
case 62:return 115
break;
case 63:return 114
break;
case 64:return 118
break;
case 65:return 119
break;
case 66:"\""
break;
case 67:"\\\""
break;
case 68:"\\\\"
break;
case 69:"\\n"
break;
case 70:"\\r"
break;
case 71:"\\t"
break;
case 72:"\\0"
break;
case 73: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 52; 
break;
case 74: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 53; 
break;
case 75:return 51
break;
case 76:return 48
break;
case 77:return 34
break;
case 78:return 5
break;
case 79: errors.default.push({
                                type: 'Lexical',
                                token: { line: yy_.yylloc.first_line, col: yy_.yylloc.fist_column },
                                msg: `${yy_.yytext} no reconocido`
                            }); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:toCharArray\b)/i,/^(?:DynamicList\b)/i,/^(?:writeLine\b)/i,/^(?:setValue\b)/i,/^(?:getValue\b)/i,/^(?:truncate\b)/i,/^(?:toString\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:append\b)/i,/^(?:length\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:new\b)/i,/^(?:else\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:QUOTES\b)/i,/^(?:PIPE_QUOTES\b)/i,/^(?:DOUBLE_PIPES\b)/i,/^(?:BREAKLINE\b)/i,/^(?:CARRETURN\b)/i,/^(?:TABULATION\b)/i,/^(?:NULLCHAR\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = index;
exports.Parser = index.Parser;
exports.parse = function () { return index.parse.apply(index, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}