/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,30],$V2=[1,31],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,8],$V8=[1,9],$V9=[1,10],$Va=[1,17],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[1,24],$Vf=[1,41],$Vg=[1,25],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[5,7,8,9,10,11,12,15,18,25,26,27,37,75,76,77,79,80,81,84,85,89,90,91],$Vl=[2,27],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,59],$Vq=[1,60],$Vr=[1,67],$Vs=[14,21,36,37,41,46,47],$Vt=[21,36],$Vu=[1,78],$Vv=[1,85],$Vw=[1,88],$Vx=[1,82],$Vy=[1,81],$Vz=[1,80],$VA=[1,86],$VB=[1,87],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[21,47],$VG=[1,97],$VH=[1,96],$VI=[1,116],$VJ=[1,126],$VK=[1,127],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,128],$VV=[1,129],$VW=[13,14,18,21,36,47,48,49,50,51,52,53,54,55,56,57,58,62,63],$VX=[2,67],$VY=[1,135],$VZ=[1,136],$V_=[1,142],$V$=[13,14,17,18,21,36,47,48,49,50,51,52,53,54,55,56,57,58,62,63],$V01=[18,36,47],$V11=[13,14,18,21,36,47,48,49,50,51,52,53,54,55,56,62,63],$V21=[18,21,36,47,48,53,55,56,62,63],$V31=[18,21,36,47,53,55,62,63],$V41=[1,197],$V51=[1,198],$V61=[18,84,85],$V71=[1,218];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"intType":7,"dblType":8,"boolType":9,"charType":10,"strType":11,"dynamicList":12,"minor":13,"major":14,"voidType":15,"BLOCKCONTENT":16,"openBracket":17,"closeBracket":18,"INSTRUCTION":19,"DECLARATION":20,"semicolom":21,"LINEASSIGNMENT":22,"INCREMENTEXP":23,"METHODS":24,"breakRw":25,"continueRw":26,"returnRw":27,"CONTROLSEQ":28,"SWITCHSEQ":29,"LOOPSEQ":30,"ASSIGNMENTS":31,"ASSIGNMENT":32,"VECTORVALUE":33,"equals":34,"EXPRESSIONS":35,"comma":36,"id":37,"TERNARY":38,"VECTORASSIGNMENT":39,"CLASSINSTANCE":40,"openSquareBracket":41,"closeSquareBracket":42,"newRw":43,"integer":44,"EXPLIST":45,"openParenthesis":46,"closeParenthesis":47,"plus":48,"equalsEquals":49,"moreOrEquals":50,"lessOrEquals":51,"notEquals":52,"divition":53,"module":54,"times":55,"minus":56,"and":57,"or":58,"not":59,"FUNCTIONHEADER":60,"VARVALUE":61,"questionMark":62,"colom":63,"plusPlus":64,"minusMinus":65,"decimal":66,"text":67,"character":68,"trBool":69,"flBool":70,"APPEND":71,"GETVALUE":72,"SETVALUE":73,"FUNCTION":74,"appendRw":75,"getValueRw":76,"setValueRw":77,"CONSTROLSEQSYM":78,"elseRw":79,"ifRw":80,"switchRw":81,"SWITCHSEQCASES":82,"SWITCHSEQCONTENT":83,"caseRw":84,"defaultRw":85,"WHILESEQ":86,"DOWHILESEQ":87,"FORSEQ":88,"whileRw":89,"doRw":90,"forRw":91,"FORSEQPARAMS":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"intType",8:"dblType",9:"boolType",10:"charType",11:"strType",12:"dynamicList",13:"minor",14:"major",15:"voidType",17:"openBracket",18:"closeBracket",21:"semicolom",25:"breakRw",26:"continueRw",27:"returnRw",34:"equals",36:"comma",37:"id",41:"openSquareBracket",42:"closeSquareBracket",43:"newRw",44:"integer",46:"openParenthesis",47:"closeParenthesis",48:"plus",49:"equalsEquals",50:"moreOrEquals",51:"lessOrEquals",52:"notEquals",53:"divition",54:"module",55:"times",56:"minus",57:"and",58:"or",59:"not",62:"questionMark",63:"colom",64:"plusPlus",65:"minusMinus",66:"decimal",67:"text",68:"character",69:"trBool",70:"flBool",75:"appendRw",76:"getValueRw",77:"setValueRw",79:"elseRw",80:"ifRw",81:"switchRw",84:"caseRw",85:"defaultRw",89:"whileRw",90:"doRw",91:"forRw"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[6,1],[16,3],[4,2],[4,1],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,1],[19,1],[19,1],[20,2],[22,1],[22,3],[31,3],[31,1],[32,1],[32,3],[32,3],[32,1],[32,1],[39,9],[39,7],[40,4],[40,4],[40,6],[40,6],[40,7],[40,7],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,4],[35,3],[35,1],[35,1],[38,5],[23,2],[23,2],[45,3],[45,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[33,4],[24,1],[24,1],[24,1],[24,1],[24,1],[71,6],[72,6],[73,8],[28,5],[28,2],[78,1],[78,2],[29,7],[82,2],[82,1],[83,4],[83,3],[30,1],[30,1],[30,1],[86,5],[87,7],[88,5],[92,5],[92,5],[92,5],[92,5],[60,4],[60,3],[74,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        return $$[$0-1]; 
    
break;
case 2:
 
        this.$ = DATATYPE.INT; 
    
break;
case 3:
 
        this.$ = DATATYPE.DECIMAL; 
    
break;
case 4:
 
        this.$ = DATATYPE.BOOLEAN; 
    
break;
case 5:
 
        this.$ = DATATYPE.CHAR; 
    
break;
case 6:
 
        this.$ = DATATYPE.STRING; 
    
break;
case 7:

        this.$ = DATATYPE.DYNAMICLIST
    
break;
case 8:

        this.$ = DATATYPE.VOID
    
break;
}
},
table: [{3:1,4:2,6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,19:3,20:4,22:5,23:6,24:7,25:$V7,26:$V8,27:$V9,28:11,29:12,30:13,32:15,33:16,37:$Va,39:36,40:37,60:21,71:18,72:19,73:20,74:22,75:$Vb,76:$Vc,77:$Vd,78:23,79:$Ve,80:$Vf,81:$Vg,86:26,87:27,88:28,89:$Vh,90:$Vi,91:$Vj},{1:[3]},{5:[1,45],6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,19:46,20:4,22:5,23:6,24:7,25:$V7,26:$V8,27:$V9,28:11,29:12,30:13,32:15,33:16,37:$Va,39:36,40:37,60:21,71:18,72:19,73:20,74:22,75:$Vb,76:$Vc,77:$Vd,78:23,79:$Ve,80:$Vf,81:$Vg,86:26,87:27,88:28,89:$Vh,90:$Vi,91:$Vj},o($Vk,[2,11]),{21:[1,47]},{21:[1,48]},{21:[1,49]},{21:[1,50]},{21:[1,51]},{21:[1,52]},{21:[1,53]},o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),{31:54,32:56,37:[1,57],39:36,40:37,60:55},{21:[2,23]},{34:[1,58]},{21:$Vl,34:$Vm,41:$Vn,46:$Vo,64:$Vp,65:$Vq},{21:[2,74]},{21:[2,75]},{21:[2,76]},{21:[2,77]},{21:[2,78]},{46:[1,64]},{16:65,17:$Vr,80:[1,66]},{46:[1,68]},o($Vk,[2,91]),o($Vk,[2,92]),o($Vk,[2,93]),o($Vs,[2,2]),o($Vs,[2,3]),o($Vs,[2,4]),o($Vs,[2,5]),o($Vs,[2,6]),{13:[1,69]},o($Vs,[2,8]),o($Vt,[2,30]),o($Vt,[2,31]),{46:[1,70]},{46:[1,71]},{46:[1,72]},{46:[2,84]},{46:[1,73]},{16:74,17:$Vr},{46:[1,75]},{1:[2,1]},o($Vk,[2,10]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),{21:[2,22],36:[1,76]},{16:77,17:$Vr},o($Vt,[2,26]),o($Vt,$Vl,{34:$Vm,41:$Vu,46:$Vo}),{33:92,35:79,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($VF,[2,61]),o($VF,[2,62]),{33:92,35:93,37:$Vv,38:94,43:[1,95],44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{42:$VG,44:$VH},{33:92,35:100,37:$Vv,44:$Vw,45:98,46:$Vx,47:[1,99],56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:101,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($Vk,[2,83]),{46:[2,85]},{4:102,6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,19:3,20:4,22:5,23:6,24:7,25:$V7,26:$V8,27:$V9,28:11,29:12,30:13,32:15,33:16,37:$Va,39:36,40:37,60:21,71:18,72:19,73:20,74:22,75:$Vb,76:$Vc,77:$Vd,78:23,79:$Ve,80:$Vf,81:$Vg,86:26,87:27,88:28,89:$Vh,90:$Vi,91:$Vj},{33:92,35:103,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{6:104,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6},{37:[1,105]},{37:[1,106]},{37:[1,107]},{33:92,35:108,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{89:[1,109]},{6:113,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,20:111,22:112,32:15,33:16,37:[1,114],39:36,40:37,92:110},{32:115,37:$VI,39:36,40:37},{21:[2,103]},{42:$VG},{13:$VJ,14:$VK,21:[2,24],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{33:92,35:130,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:131,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{6:133,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,33:92,35:132,37:$Vv,38:134,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($VW,[2,58]),o($VW,[2,59]),o($VW,$VX,{41:$VY,46:$Vo}),o($VW,[2,65]),o($VW,[2,66]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),o($VW,[2,71]),o($VW,[2,72]),o($Vt,[2,28],{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,62:$VZ}),o($Vt,[2,29]),{6:137,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,37:[1,138]},{42:[1,139]},{34:[1,140]},{36:$V_,47:[1,141]},o($V$,[2,102]),o($V01,[2,64],{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV}),{13:$VJ,14:$VK,47:[1,143],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,18:[1,144],19:46,20:4,22:5,23:6,24:7,25:$V7,26:$V8,27:$V9,28:11,29:12,30:13,32:15,33:16,37:$Va,39:36,40:37,60:21,71:18,72:19,73:20,74:22,75:$Vb,76:$Vc,77:$Vd,78:23,79:$Ve,80:$Vf,81:$Vg,86:26,87:27,88:28,89:$Vh,90:$Vi,91:$Vj},{13:$VJ,14:$VK,47:[1,145],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{14:[1,146]},{36:[1,147]},{36:[1,148]},{36:[1,149]},{13:$VJ,14:$VK,47:[1,150],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{46:[1,151]},{47:[1,152]},{21:[1,153]},{21:[1,154]},{31:54,32:56,37:$VI,39:36,40:37},{21:$Vl,34:$Vm,41:$Vn},o($Vt,[2,25]),o($Vt,$Vl,{34:$Vm,41:$Vu}),{33:92,35:155,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:156,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:157,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:158,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:159,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:160,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:161,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:162,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:163,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:164,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:165,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:166,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:167,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($V11,[2,53],{57:$VU,58:$VV}),o($V21,[2,54],{13:$VJ,14:$VK,49:$VM,50:$VN,51:$VO,52:$VP,54:$VR,57:$VU,58:$VV}),{13:$VJ,14:$VK,47:[1,168],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,62:$VZ},{47:[1,169]},{47:[1,170]},{44:$VH},{33:92,35:171,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($Vt,[2,34],{46:[1,172]}),o($Vt,[2,35],{46:[1,173]}),o([13,14,18,21,34,36,47,48,49,50,51,52,53,54,55,56,57,58,62,63],[2,73]),{17:[1,175],43:[1,174]},o($V$,[2,101]),{33:92,35:176,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{16:177,17:$Vr},o([5,7,8,9,10,11,12,15,18,21,25,26,27,37,75,76,77,79,80,81,84,85,89,90,91],[2,9]),{17:[1,178]},o($Vs,[2,7]),{33:92,35:179,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:180,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:181,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{16:182,17:$Vr},{33:92,35:183,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{16:184,17:$Vr},{33:92,35:185,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:186,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($V21,[2,40],{13:$VJ,14:$VK,49:$VM,50:$VN,51:$VO,52:$VP,54:$VR,57:$VU,58:$VV}),o($V11,[2,41],{57:$VU,58:$VV}),o($V11,[2,42],{57:$VU,58:$VV}),o($V11,[2,43],{57:$VU,58:$VV}),o($V11,[2,44],{57:$VU,58:$VV}),o($V31,[2,45],{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,54:$VR,56:$VT,57:$VU,58:$VV}),o([18,21,36,47,48,53,54,55,56,62,63],[2,46],{13:$VJ,14:$VK,49:$VM,50:$VN,51:$VO,52:$VP,57:$VU,58:$VV}),o($V31,[2,47],{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,54:$VR,56:$VT,57:$VU,58:$VV}),o($V21,[2,48],{13:$VJ,14:$VK,49:$VM,50:$VN,51:$VO,52:$VP,54:$VR,57:$VU,58:$VV}),o($V11,[2,49],{57:$VU,58:$VV}),o($V11,[2,50],{57:$VU,58:$VV}),o([13,14,18,21,36,47,48,49,50,51,52,53,54,55,56,57,62,63],[2,51],{58:$VV}),o($VW,[2,52]),o($VW,[2,55]),{33:92,35:187,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($VW,[2,57]),{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,63:[1,188]},{33:92,35:100,37:$Vv,44:$Vw,45:190,46:$Vx,47:[1,189],56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{33:92,35:100,37:$Vv,44:$Vw,45:192,46:$Vx,47:[1,191],56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{6:193,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6},{33:92,35:100,37:$Vv,44:$Vw,45:194,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($V01,[2,63],{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV}),o($Vk,[2,82]),{82:195,83:196,84:$V41,85:$V51},{13:$VJ,14:$VK,47:[1,199],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{13:$VJ,14:$VK,47:[1,200],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{13:$VJ,14:$VK,36:[1,201],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},o($Vk,[2,94]),{13:$VJ,14:$VK,47:[1,202],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},o($Vk,[2,96]),{13:$VJ,14:$VK,21:[1,203],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{13:$VJ,14:$VK,21:[1,204],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},o($VW,[2,56]),{33:92,35:205,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($Vt,[2,36]),{36:$V_,47:[1,206]},o($Vt,[2,37]),{36:$V_,47:[1,207]},{41:[1,208]},{18:[1,209],36:$V_},{18:[1,210],83:211,84:$V41,85:$V51},o($V61,[2,88]),{33:92,35:212,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{63:[1,213]},{21:[2,79]},{21:[2,80]},{33:92,35:214,37:$Vv,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{21:[1,215]},{23:217,33:92,35:216,37:$V71,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{23:220,33:92,35:219,37:$V71,44:$Vw,46:$Vx,56:$Vy,59:$Vz,60:83,61:84,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o([21,36,47],[2,60],{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV}),o($Vt,[2,38]),o($Vt,[2,39]),{44:[1,221]},o($Vt,[2,33]),o($Vk,[2,86]),o($V61,[2,87]),{13:$VJ,14:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,63:[1,222]},{4:223,6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,19:3,20:4,22:5,23:6,24:7,25:$V7,26:$V8,27:$V9,28:11,29:12,30:13,32:15,33:16,37:$Va,39:36,40:37,60:21,71:18,72:19,73:20,74:22,75:$Vb,76:$Vc,77:$Vd,78:23,79:$Ve,80:$Vf,81:$Vg,86:26,87:27,88:28,89:$Vh,90:$Vi,91:$Vj},{13:$VJ,14:$VK,47:[1,224],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},o($Vk,[2,95]),{13:$VJ,14:$VK,47:[2,97],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{47:[2,98]},o([13,14,47,48,49,50,51,52,53,54,55,56,57,58],$VX,{41:$VY,46:$Vo,64:$Vp,65:$Vq}),{13:$VJ,14:$VK,47:[2,99],48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV},{47:[2,100]},{42:[1,225]},{4:226,6:14,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,19:3,20:4,22:5,23:6,24:7,25:$V7,26:$V8,27:$V9,28:11,29:12,30:13,32:15,33:16,37:$Va,39:36,40:37,60:21,71:18,72:19,73:20,74:22,75:$Vb,76:$Vc,77:$Vd,78:23,79:$Ve,80:$Vf,81:$Vg,86:26,87:27,88:28,89:$Vh,90:$Vi,91:$Vj},o($V61,[2,90],{20:4,22:5,23:6,24:7,28:11,29:12,30:13,6:14,32:15,33:16,71:18,72:19,73:20,60:21,74:22,78:23,86:26,87:27,88:28,39:36,40:37,19:46,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,25:$V7,26:$V8,27:$V9,37:$Va,75:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,89:$Vh,90:$Vi,91:$Vj}),{21:[2,81]},o($Vt,[2,32]),o($V61,[2,89],{20:4,22:5,23:6,24:7,28:11,29:12,30:13,6:14,32:15,33:16,71:18,72:19,73:20,60:21,74:22,78:23,86:26,87:27,88:28,39:36,40:37,19:46,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,15:$V6,25:$V7,26:$V8,27:$V9,37:$Va,75:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,89:$Vh,90:$Vi,91:$Vj})],
defaultActions: {15:[2,23],18:[2,74],19:[2,75],20:[2,76],21:[2,77],22:[2,78],41:[2,84],45:[2,1],66:[2,85],77:[2,103],199:[2,79],200:[2,80],217:[2,98],220:[2,100],224:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const DATATYPE = require('./ast')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 10
break;
case 4:return 15
break;
case 5:return 9
break;
case 6:return 11
break;
case 7:return 8
break;
case 8:return 7
break;
case 9:return 69
break;
case 10:return 70
break;
case 11:return 51
break;
case 12:return 50
break;
case 13:return 49
break;
case 14:return 52
break;
case 15:return 65
break;
case 16:return 64
break;
case 17:return 62
break;
case 18:return 63
break;
case 19:return 53
break;
case 20:return 54
break;
case 21:return 55
break;
case 22:return 'power'
break;
case 23:return 34
break;
case 24:return 13
break;
case 25:return 14
break;
case 26:return 56
break;
case 27:return 48
break;
case 28:return 57
break;
case 29:return 59
break;
case 30:return 58
break;
case 31:return 36
break;
case 32:return 21
break;
case 33:return 17
break;
case 34:return 18
break;
case 35:return 46
break;
case 36:return 47
break;
case 37:return 41
break;
case 38:return 42
break;
case 39:return 43;
break;
case 40:return 12
break;
case 41:return 75
break;
case 42:return 76
break;
case 43:return 77
break;
case 44:return 80
break;
case 45:return 79
break;
case 46:return 81
break;
case 47:return 25
break;
case 48:return 84
break;
case 49:return 85
break;
case 50:return 89
break;
case 51:return 91
break;
case 52:return 90
break;
case 53:return 26
break;
case 54:return 27
break;
case 55:"\""
break;
case 56:"\\\""
break;
case 57:"\\\\"
break;
case 58:"\\n"
break;
case 59:"\\r"
break;
case 60:"\\t"
break;
case 61:"\\0"
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 64:return 66
break;
case 65:return 44
break;
case 66:return 37
break;
case 67:return 5
break;
case 68: console.error('Error léxico: ' 
                              + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line 
                              + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:QUOTES\b)/i,/^(?:PIPE_QUOTES\b)/i,/^(?:DOUBLE_PIPES\b)/i,/^(?:BREAKLINE\b)/i,/^(?:CARRETURN\b)/i,/^(?:TABULATION\b)/i,/^(?:NULLCHAR\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = index;
exports.Parser = index.Parser;
exports.parse = function () { return index.parse.apply(index, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}