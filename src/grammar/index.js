/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var index = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,13],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,18],$Vb=[1,31],$Vc=[1,19],$Vd=[5,7,8,9,10,11,12,17,32,68,69,70,72,73,74,77,78,79],$Ve=[1,40],$Vf=[2,22],$Vg=[1,44],$Vh=[1,49],$Vi=[14,20,31,32,36,41,42],$Vj=[20,31],$Vk=[1,64],$Vl=[1,65],$Vm=[1,60],$Vn=[1,59],$Vo=[1,58],$Vp=[1,62],$Vq=[1,63],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,74],$Vv=[1,73],$Vw=[1,92],$Vx=[1,93],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,94],$VI=[1,95],$VJ=[13,14,20,31,42,43,44,45,46,47,48,49,50,51,52,53,56,57],$VK=[13,14,17,20,31,42,43,44,45,46,47,48,49,50,51,52,53,56,57],$VL=[1,102],$VM=[13,14,20,31,42,43,44,45,46,47,48,49,50,51,56,57],$VN=[20,31,42,43,48,50,51,56,57],$VO=[20,31,42,48,50,56,57],$VP=[1,151],$VQ=[1,152],$VR=[1,158],$VS=[17,31,42],$VT=[17,78,79],$VU=[17,77,78,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"intType":7,"dblType":8,"boolType":9,"charType":10,"strType":11,"dynamicList":12,"minor":13,"major":14,"BLOCKCONTENT":15,"openBracket":16,"closeBracket":17,"INSTRUCTION":18,"DECLARATION":19,"semicolom":20,"LINEASSIGNMENT":21,"INCREMENTEXP":22,"METHODS":23,"CONTROLSEQ":24,"SWITCHSEQ":25,"ASSIGNMENTS":26,"ASSIGNMENT":27,"VECTORVALUE":28,"equals":29,"EXPRESSIONS":30,"comma":31,"id":32,"TERNARY":33,"VECTORASSIGNMENT":34,"CLASSINSTANCE":35,"openSquareBracket":36,"closeSquareBracket":37,"newRw":38,"integer":39,"VALUELIST":40,"openParenthesis":41,"closeParenthesis":42,"plus":43,"equalsEquals":44,"moreOrEquals":45,"lessOrEquals":46,"notEquals":47,"divition":48,"module":49,"times":50,"minus":51,"and":52,"or":53,"not":54,"VARVALUE":55,"questionMark":56,"colom":57,"plusPlus":58,"minusMinus":59,"decimal":60,"text":61,"character":62,"trBool":63,"flBool":64,"APPEND":65,"GETVALUE":66,"SETVALUE":67,"appendRw":68,"getValueRw":69,"setValueRw":70,"CONSTROLSEQSYM":71,"elseRw":72,"ifRw":73,"switchRw":74,"SWITCHSEQCASES":75,"SWITCHSEQCONTENT":76,"breakRw":77,"caseRw":78,"defaultRw":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"intType",8:"dblType",9:"boolType",10:"charType",11:"strType",12:"dynamicList",13:"minor",14:"major",16:"openBracket",17:"closeBracket",20:"semicolom",29:"equals",31:"comma",32:"id",36:"openSquareBracket",37:"closeSquareBracket",38:"newRw",39:"integer",41:"openParenthesis",42:"closeParenthesis",43:"plus",44:"equalsEquals",45:"moreOrEquals",46:"lessOrEquals",47:"notEquals",48:"divition",49:"module",50:"times",51:"minus",52:"and",53:"or",54:"not",56:"questionMark",57:"colom",58:"plusPlus",59:"minusMinus",60:"decimal",61:"text",62:"character",63:"trBool",64:"flBool",68:"appendRw",69:"getValueRw",70:"setValueRw",72:"elseRw",73:"ifRw",74:"switchRw",77:"breakRw",78:"caseRw",79:"defaultRw"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[15,3],[4,2],[4,1],[18,2],[18,2],[18,2],[18,2],[18,1],[18,1],[19,2],[21,1],[21,3],[26,3],[26,1],[27,1],[27,3],[27,3],[27,1],[27,1],[34,9],[34,7],[35,4],[35,4],[35,6],[35,6],[35,7],[35,7],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,3],[30,4],[30,3],[30,1],[33,5],[22,2],[22,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[28,4],[40,3],[40,1],[23,1],[23,1],[23,1],[65,6],[66,6],[67,8],[24,5],[24,2],[71,1],[71,2],[25,7],[75,2],[75,1],[75,4],[75,3],[76,4],[76,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
        return $$[$0-1]; 
    
break;
case 2:
 
        this.$ = DATATYPE.INT; 
    
break;
case 3:
 
        this.$ = DATATYPE.DECIMAL; 
    
break;
case 4:
 
        this.$ = DATATYPE.BOOLEAN; 
    
break;
case 5:
 
        this.$ = DATATYPE.CHAR; 
    
break;
case 6:
 
        this.$ = DATATYPE.STRING; 
    
break;
case 7:

        this.$ = DATATYPE.DYNAMICLIST
    
break;
case 9:
 
        $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
    
break;
case 10:
 
        this.$ = [$$[$0]]; 
    
break;
case 16:
 
break;
}
},
table: [{3:1,4:2,6:10,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,19:4,21:5,22:6,23:7,24:8,25:9,27:11,28:12,32:$V6,34:26,35:27,65:14,66:15,67:16,68:$V7,69:$V8,70:$V9,71:17,72:$Va,73:$Vb,74:$Vc},{1:[3]},{5:[1,32],6:10,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:33,19:4,21:5,22:6,23:7,24:8,25:9,27:11,28:12,32:$V6,34:26,35:27,65:14,66:15,67:16,68:$V7,69:$V8,70:$V9,71:17,72:$Va,73:$Vb,74:$Vc},o($Vd,[2,10]),{20:[1,34]},{20:[1,35]},{20:[1,36]},{20:[1,37]},o($Vd,[2,15]),o($Vd,[2,16]),{26:38,27:39,32:$Ve,34:26,35:27},{20:[2,18]},{29:[1,41]},{20:$Vf,29:$Vg,36:[1,45],58:[1,42],59:[1,43]},{20:[2,68]},{20:[2,69]},{20:[2,70]},{41:[1,46]},{15:47,16:$Vh,73:[1,48]},{41:[1,50]},o($Vi,[2,2]),o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),{13:[1,51]},o($Vj,[2,25]),o($Vj,[2,26]),{41:[1,52]},{41:[1,53]},{41:[1,54]},{41:[2,76]},{1:[2,1]},o($Vd,[2,9]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{20:[2,17],31:[1,55]},o($Vj,[2,21]),o($Vj,$Vf,{29:$Vg,36:[1,56]}),{28:69,30:57,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{20:[2,55]},{20:[2,56]},{28:69,30:70,32:$Vk,33:71,38:[1,72],39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{37:$Vu,39:$Vv},{28:69,30:75,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($Vd,[2,75]),{41:[2,77]},{4:76,6:10,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,19:4,21:5,22:6,23:7,24:8,25:9,27:11,28:12,32:$V6,34:26,35:27,65:14,66:15,67:16,68:$V7,69:$V8,70:$V9,71:17,72:$Va,73:$Vb,74:$Vc},{28:69,30:77,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{6:78,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5},{32:[1,79]},{32:[1,80]},{32:[1,81]},{27:82,32:$Ve,34:26,35:27},{37:$Vu},{13:$Vw,14:$Vx,20:[2,19],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{28:69,30:96,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:97,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{6:99,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,28:69,30:98,32:$Vk,33:100,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($VJ,[2,53]),o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59],{36:[1,101]}),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,[2,64]),o($Vj,[2,23],{13:$Vw,14:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI,56:$VL}),o($Vj,[2,24]),{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,32:[1,104]},{37:[1,105]},{29:[1,106]},{13:$Vw,14:$Vx,42:[1,107],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{6:10,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,17:[1,108],18:33,19:4,21:5,22:6,23:7,24:8,25:9,27:11,28:12,32:$V6,34:26,35:27,65:14,66:15,67:16,68:$V7,69:$V8,70:$V9,71:17,72:$Va,73:$Vb,74:$Vc},{13:$Vw,14:$Vx,42:[1,109],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{14:[1,110]},{31:[1,111]},{31:[1,112]},{31:[1,113]},o($Vj,[2,20]),{28:69,30:114,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:115,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:116,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:117,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:118,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:119,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:120,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:121,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:122,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:123,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:124,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:125,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:126,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($VM,[2,48],{52:$VH,53:$VI}),o($VN,[2,49],{13:$Vw,14:$Vx,44:$Vz,45:$VA,46:$VB,47:$VC,49:$VE,52:$VH,53:$VI}),{13:$Vw,14:$Vx,42:[1,127],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI,56:$VL},{42:[1,128]},{42:[1,129]},{39:$Vv},{28:69,30:130,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($Vj,[2,29],{41:[1,131]}),o($Vj,[2,30],{41:[1,132]}),o([13,14,17,20,29,31,42,43,44,45,46,47,48,49,50,51,52,53,56,57],[2,65]),{16:[1,134],38:[1,133]},{15:135,16:$Vh},o($Vd,[2,8]),{16:[1,136]},o($Vi,[2,7]),{28:69,30:137,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:138,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,30:139,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($VN,[2,35],{13:$Vw,14:$Vx,44:$Vz,45:$VA,46:$VB,47:$VC,49:$VE,52:$VH,53:$VI}),o($VM,[2,36],{52:$VH,53:$VI}),o($VM,[2,37],{52:$VH,53:$VI}),o($VM,[2,38],{52:$VH,53:$VI}),o($VM,[2,39],{52:$VH,53:$VI}),o($VO,[2,40],{13:$Vw,14:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,49:$VE,51:$VG,52:$VH,53:$VI}),o([20,31,42,43,48,49,50,51,56,57],[2,41],{13:$Vw,14:$Vx,44:$Vz,45:$VA,46:$VB,47:$VC,52:$VH,53:$VI}),o($VO,[2,42],{13:$Vw,14:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,49:$VE,51:$VG,52:$VH,53:$VI}),o($VN,[2,43],{13:$Vw,14:$Vx,44:$Vz,45:$VA,46:$VB,47:$VC,49:$VE,52:$VH,53:$VI}),o($VM,[2,44],{52:$VH,53:$VI}),o($VM,[2,45],{52:$VH,53:$VI}),o([13,14,20,31,42,43,44,45,46,47,48,49,50,51,52,56,57],[2,46],{53:$VI}),o($VJ,[2,47]),o($VJ,[2,50]),{28:69,30:140,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($VJ,[2,52]),{13:$Vw,14:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI,57:[1,141]},{28:69,32:$Vk,39:$Vl,40:143,42:[1,142],55:144,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{28:69,32:$Vk,39:$Vl,40:146,42:[1,145],55:144,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{6:147,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5},{28:69,32:$Vk,39:$Vl,40:148,55:144,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($Vd,[2,74]),{75:149,76:150,78:$VP,79:$VQ},{13:$Vw,14:$Vx,42:[1,153],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{13:$Vw,14:$Vx,42:[1,154],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},{13:$Vw,14:$Vx,31:[1,155],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VJ,[2,51]),{28:69,30:156,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($Vj,[2,31]),{31:$VR,42:[1,157]},o($VS,[2,67]),o($Vj,[2,32]),{31:$VR,42:[1,159]},{36:[1,160]},{17:[1,161],31:$VR},{17:[1,162],76:163,78:$VP,79:$VQ},o($VT,[2,80],{77:[1,164]}),{28:69,32:$Vk,39:$Vl,55:165,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},{57:[1,166]},{20:[2,71]},{20:[2,72]},{28:69,30:167,32:$Vk,39:$Vl,41:$Vm,51:$Vn,54:$Vo,55:61,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o([20,31,42],[2,54],{13:$Vw,14:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI}),o($Vj,[2,33]),{28:69,32:$Vk,39:$Vl,55:168,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt},o($Vj,[2,34]),{39:[1,169]},o($Vj,[2,28]),o($Vd,[2,78]),o($VT,[2,79],{77:[1,170]}),{20:[1,171]},{57:[1,172]},{4:173,6:10,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,19:4,21:5,22:6,23:7,24:8,25:9,27:11,28:12,32:$V6,34:26,35:27,65:14,66:15,67:16,68:$V7,69:$V8,70:$V9,71:17,72:$Va,73:$Vb,74:$Vc},{13:$Vw,14:$Vx,42:[1,174],43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$VI},o($VS,[2,66]),{37:[1,175]},{20:[1,176]},o($VT,[2,82]),{4:177,6:10,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,18:3,19:4,21:5,22:6,23:7,24:8,25:9,27:11,28:12,32:$V6,34:26,35:27,65:14,66:15,67:16,68:$V7,69:$V8,70:$V9,71:17,72:$Va,73:$Vb,74:$Vc},o($VU,[2,84],{19:4,21:5,22:6,23:7,24:8,25:9,6:10,27:11,28:12,65:14,66:15,67:16,71:17,34:26,35:27,18:33,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,32:$V6,68:$V7,69:$V8,70:$V9,72:$Va,73:$Vb,74:$Vc}),{20:[2,73]},o($Vj,[2,27]),o($VT,[2,81]),o($VU,[2,83],{19:4,21:5,22:6,23:7,24:8,25:9,6:10,27:11,28:12,65:14,66:15,67:16,71:17,34:26,35:27,18:33,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:$V5,32:$V6,68:$V7,69:$V8,70:$V9,72:$Va,73:$Vb,74:$Vc})],
defaultActions: {11:[2,18],14:[2,68],15:[2,69],16:[2,70],31:[2,76],32:[2,1],42:[2,55],43:[2,56],48:[2,77],153:[2,71],154:[2,72],174:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const DATATYPE = require('./ast')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 10
break;
case 4:return 9
break;
case 5:return 11
break;
case 6:return 8
break;
case 7:return 7
break;
case 8:return 63
break;
case 9:return 64
break;
case 10:return 46
break;
case 11:return 45
break;
case 12:return 44
break;
case 13:return 47
break;
case 14:return 59
break;
case 15:return 58
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 48
break;
case 19:return 49
break;
case 20:return 50
break;
case 21:return 'power'
break;
case 22:return 29
break;
case 23:return 13
break;
case 24:return 14
break;
case 25:return 51
break;
case 26:return 43
break;
case 27:return 52
break;
case 28:return 54
break;
case 29:return 53
break;
case 30:return 31
break;
case 31:return 20
break;
case 32:return 16
break;
case 33:return 17
break;
case 34:return 41
break;
case 35:return 42
break;
case 36:return 36
break;
case 37:return 37
break;
case 38:return 38;
break;
case 39:return 12
break;
case 40:return 68
break;
case 41:return 69
break;
case 42:return 70
break;
case 43:return 73
break;
case 44:return 72
break;
case 45:return 74
break;
case 46:return 77
break;
case 47:return 78
break;
case 48:return 79
break;
case 49:"\""
break;
case 50:"\\\""
break;
case 51:"\\\\"
break;
case 52:"\\n"
break;
case 53:"\\r"
break;
case 54:"\\t"
break;
case 55:"\\0"
break;
case 56: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 57: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 62; 
break;
case 58:return 60
break;
case 59:return 39
break;
case 60:return 32
break;
case 61:return 5
break;
case 62: console.error('Error léxico: ' 
                              + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line 
                              + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:DynamicList\b)/i,/^(?:append\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:QUOTES\b)/i,/^(?:PIPE_QUOTES\b)/i,/^(?:DOUBLE_PIPES\b)/i,/^(?:BREAKLINE\b)/i,/^(?:CARRETURN\b)/i,/^(?:TABULATION\b)/i,/^(?:NULLCHAR\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = index;
exports.Parser = index.Parser;
exports.parse = function () { return index.parse.apply(index, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}